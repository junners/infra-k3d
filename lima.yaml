vmType: 'vz'
rosetta:
  # Enable Rosetta for Linux.
  # Hint: try `softwareupdate --install-rosetta` if Lima gets stuck at `Installing rosetta...`
  enabled: true
  # Register rosetta to /proc/sys/fs/binfmt_misc
  binfmt: true

disk: 20GiB

images:
  - location: 'https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img'
    arch: 'x86_64'
  - location: 'https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-arm64.img'
    arch: 'aarch64'
mounts:
  - location: './scripts'
mountType: 'virtiofs'

networks:
  - vzNAT: true

hostResolver:
  enabled: true

portForwards:
  - guestPort: 6443
    hostPort: 6443
  - guestPort: 80
    hostPort: 8080
  - guestPort: 443
    hostPort: 8443

containerd:
  system: false
  user: false

provision:
  - mode: system
    script: |
      #!/bin/sh
      if [ ! -d /var/lib/rancher/k3s ]; then
              curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server --write-kubeconfig-mode 644 --disable traefik --disable servicelb --disable metrics-server --kubelet-arg=feature-gates=SidecarContainers=true" sh -

              # Extract server IP and token
              SERVER_IP=$(hostname -I | awk '{print $1}')
              NODE_TOKEN=$(sudo cat /var/lib/rancher/k3s/server/node-token)

              curl -sfL https://get.k3s.io | \
                K3S_URL="https://${SERVER_IP}:6443" \
                K3S_TOKEN="${NODE_TOKEN}" \
                sh -
      fi
  - mode: system
    script: |
      #!/bin/sh
      curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      curl -fsSL https://istio.io/downloadIstioctl | bash
      export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
      helm repo add istio https://istio-release.storage.googleapis.com/charts
      helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      helm repo add metallb https://metallb.github.io/metallb
      helm repo update
      helm upgrade --install istio-base istio/base -n istio-system --set defaultRevision=default --set pilot.cni.enabled=true --set pilot.env.ENABLE_NATIVE_SIDECAR=true --set pilot.env.PILOT_ENABLE_GATEWAY_API_GATEWAYCLASS_CONTROLLER=true --create-namespace --set global.platform=k3s --set profile=ambient --wait
      kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
        kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml
      
      helm upgrade --install istiod istio/istiod --namespace istio-system --set profile=ambient --set pilot.cni.enabled=true --set pilot.env.ENABLE_NATIVE_SIDECAR=true --set pilot.env.PILOT_ENABLE_GATEWAY_API_GATEWAYCLASS_CONTROLLER=true --set global.platform=k3s --wait
      helm upgrade --install istio-cni istio/cni --namespace istio-system --set profile=ambient --set pilot.cni.enabled=true --set pilot.env.ENABLE_NATIVE_SIDECAR=true --set pilot.env.PILOT_ENABLE_GATEWAY_API_GATEWAYCLASS_CONTROLLER=true --set global.platform=k3s --wait
      kubectl label namespace default istio-injection=enabled
      helm upgrade --install metallb metallb/metallb --namespace metallb-system --create-namespace --wait
  - mode: system
    script: |
      #!/bin/sh
      SERVER_IP=$(hostname -I | awk '{print $1}')/24
      cat <<EOF | kubectl apply -f -
      apiVersion: metallb.io/v1beta1
      kind: IPAddressPool
      metadata:
        name: local-pool
        namespace: metallb-system
      spec:
        addresses:
        - $SERVER_IP
      EOF

      cat <<EOF | kubectl apply -f -
      apiVersion: metallb.io/v1beta1
      kind: BGPAdvertisement
      metadata:
        name: metal-lb-external
        namespace: metallb-system
      spec:
        ipAddressPools:
        - local-pool
      EOF

probes:
  - script: |
      #!/bin/bash
      set -eux -o pipefail
      if ! timeout 30s bash -c "until test -f /etc/rancher/k3s/k3s.yaml; do sleep 3; done"; then
              echo >&2 "k3s is not running yet"
              exit 1
      fi
    hint: |
      The k3s kubeconfig file has not yet been created.
      Run "limactl shell k3s sudo journalctl -u k3s" to check the log.
      If that is still empty, check the bottom of the log at "/var/log/cloud-init-output.log".
copyToHost:
  - guest: '/etc/rancher/k3s/k3s.yaml'
    host: '{{.Dir}}/copied-from-guest/kubeconfig.yaml'
    deleteOnStop: true
message: |
  To run `kubectl` on the host (assumes kubectl is installed), run the following commands:
  ------
  export KUBECONFIG="{{.Dir}}/copied-from-guest/kubeconfig.yaml"
  ------
